= JSON-CRUD API Documentation
:author: Mike Amundsen
:email: mca@mamund.com
:toc2:

[[overview]]
== Overview
This documentation covers the BigCo Task Process Service (TPS) web API.

[[rfc2119]]
=== RFC2119 Keywords
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", 
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be 
interpreted as described in link:http://tools.ietf.org/html/rfc2119[RFC2119].

[[media-type]]
=== Media Type support
All server response bodies and request bodies MUST be valid  
link:http://tools.ietf.org/search/rfc4627[JSON Media Type] messages. 

[[operations]]
== URLs and Operations
Below are the URLs and the operations associated with them.

[[task-url]]
=== Tasks
The *Task* URL (+/task/+) is the base URL for reading and updating *Task* objects The table below shows all the *Task*-related operations, their URLs, methods, and payloads.

[[task-operations]]
.Task Operations
[frame="topbot", cols="2,8,2,3,4", options="header", grid="all", width="100%"]
|==================================
|Operation|URL|Method|Returns |Inputs 
|TaskList|+/task/+|+GET+|<<task-payload, Task Payload>>|+none+
|TaskAdd|+/task/+|+POST+|<<task-payload, Task Payload>>|+<<title>>+, 
+<<completeFlag>>+
|TaskItem|+/task/\{id}+|+GET+|<<task-payload, Task Payload>>|+none+
|TaskUpdate|+/task/\{id}+|+PUT+|<<task-payload, Task Payload>>|+<<id>>+, 
+<<title>>+, +<<completeFlag>>+
|TaskDelete|+/task/\{id}+|+DELETE+|<<task-payload, Task Payload>>|+none+
|TaskMarkComplete|+/task/completed/\{id}+|+POST+|<<task-payload, Task Payload>>|+none+
|TaskAssignUser|+/task/assign/\{id}+|+POST+|<<task-payload, Task Payload>>|+<<id>>+, +<<nick>>+
|TaskFilterByTitle|+/task/?Title=\{title}+|+GET+|<<task-payload, Task Payload>>|+none+
|TaskFilterByStatus|+/task/?CompleteFlag=\{status}+|+GET+|<<task-payload, Task Payload>>|+none+
|TaskFilterByUser|+/task/?AssignedUser=\{nick}+|+GET+|<<task-payload, Task Payload>>|+none+
|=================================

[[user-url]]
=== Users
The *User* URL (+/user/+) is the base URL for reading and updating *User* objects and supports the following operations:

[[user-operations]]
.User Operations
[frame="topbot", cols="2,8,2,3,4", options="header", grid="all", width="100%"]
|=================================
|Operation|URL|Method|Returns|Inputs
|UserList|+/user/+|+GET+|<<user-payload, User Payload>>|+none+
|UserAdd|+/user/+|+POST+|<<user-payload, User Payload>>|+<<nick>>+,
+<<password>>+,
+<<name>>+
|UserItem|+/user/\{nick}+|+GET+|<<user-payload, User Payload>>|+none+
|UserUpdate|+/user/\{nick}+|+PUT+|<<user-payload, User Payload>>|+<<nick>>+,
+<<name>>+
|UserChangePassword|+/user/changepw/\{nick}+|+POST+|<<user-payload, User Payload>>|+<<nick>>+,
+<<oldPass>>+,
+<<newPass>>+,
+<<checkPass>>+
|UserFilterByNick|+/user/?nick=\{nick}+|+GET+|<<user-payload, User Payload>>|+none+
|UserFilterByName|+/user/?name=\{name}+|+GET+|<<user-payload, User Payload>>|+none+
|==================================

[[responses]]
== Responses
The Task API returns three possible payloads (as JSON object arrays): 

 . <<task-payload, Task Payload>> 
 . <<user-payload, User Payload>>
 . <<error-payload, Error Payload>>

See below for details.

[[task-payload]]
=== Task Payload
A *Task* object looks like this:

.Single Task Object
[source, javascript]
----
{
  task : [
    {
      id: "137h96l7mpv",
      title: "LAX",
      completeFlag: "true",
      assignedUser: "bob",
      dateCreated: "2016-01-14T17:48:42.083Z",
      dateUpdated: "2016-01-26T03:39:08.266Z"
    }
  ]
}
----

*Task* objects MUST be returned as a named array (+task+). The array MAY have only one member. The valid list of properties for a *Task* object are: +<<id>>+, +<<title>>+, +<<completeFlag>>+, +<<assignedUser>>+, +<<dateCreated>>+, and +<<dateUpdated>>+. See <<data-elements, Data Elements>> for more information on each property.  

[[user-payload]]
=== User Payload
A *User* object looks like this:

.User Object
[source, javascript]
----
{
  user: [
    {
      id: "alice",
      nick: "alice",
      password: "a1!c#",
      name: "Alice Teddington, Sr.",
      dateCreated: "2016-01-18T02:12:55.747Z",
      dateUpdated: "2016-01-18T03:26:36.572Z"
    }
  ]
}
----

*User* objects MUST be returned as a named array (+user+). The array MAY have only one member. The valid list of properties for a *User* object are: +<<id>>+, +<<nick>>+, +<<password>>+, +<<name>>+, +<<dateCreated>>+, and +<<dateUpdated>>+. See <<data-elements, Data Elements>> for more information on each property.

[[error-payload]]
=== Error Payload
When the service encounters an error (HTTP 4xx or 5xx) the service returns an Error Payload that looks like this:

.Error Payload
[source,javascript]
----
{
  error: {
    code: 404,
    message: "Not Found",
    url: "http://rwcbook02.herokuapp.com/invalid-url/"
  }
}
----

The first element in an Error Payload MUST be an +error+ JSON object three properties. Those properties are: +<<code>>+, +<<message>>+, and +<<url>>+. See the <<data-elements, Data Elements>> section for more details.

[[requests]]
== Requests
(text goes here)

[[data-elements]]
== Data Elements 
What follows is a list of all the possible data elements that MAY appear within a TPS web API payload. Note that these values can appear in both requests and responses.

NOTE: This list is in alphabetical order. Note the references in each definition to learn which TPS web API payloads use each data element.

[[assignedUser]]
=== assignedUser
Indicates the user to which this record is assigned. This value of this data element MUST match an existing <<user-payload, User>> +<<id>>+ value. See <<user-payload, User Payload>>.

[[checkPass]]
=== checkPass
Check value to use when changing the +<<oldPass>>+ to +<<newPass>>+. The value of +<<checkPass>>+ MUST exactly match the value of +<<newPass>>+.
 
[[code]]
=== code
HTTP Error code. See <<error-payload,Error Payload>>.

[[completeFlag]]
=== completeFlag
Indicates the completion status of this record. Valid values for this data elements are: +"true"+ and +"false"+. See <<task-payload, Task Payload>>. 

[[dateCreated]]
=== dateCreated
The date this record was created. The value of this data element MUST in the http://www.iso.org/iso/home/standards/iso8601.htm[ISO 8601] form. See <<task-payload, Task Payload>>, <<user-payload, User Payload>>.

[[dateUpdated]]
=== dateUpdated
The date this record was last updated. The value of this data element MUST in the http://www.iso.org/iso/home/standards/iso8601.htm[ISO 8601] form. See <<task-payload, Task Payload>>, <<user-payload, User Payload>>. 

[[id]]
=== id
The record/object identifier. See <<task-payload, Task Payload>>, <<user-payload, User Payload>>.

[[message]] 
=== message
Application-specific error description. See <<error-payload,Error Payload>>.

[[name]]
=== name
Name string for this record. See <<user-payload, User Payload>>.

[[newPass]]
=== newPass
The new password for the user account. Used to change the +<<oldPass>>+ to a new value.

[[nick]]
=== nick
The nickname of the user. The value of this data element SHOULD match the value of the <<user-payload, User>> +<<id>>+ data element. See <<user-payload, User Payload>>.

[[oldPass]]
=== oldPass
The existing password for the user account. Used to change the existing password to +<<newPass>>+.

[[password]]
=== password
The password for the user account. See <<user-payload, User Payload>>.

[[title]]
=== title
Title string for this record. See <<task-payload, Task Payload>>.

[[url]]
=== url
URL that was invokved that caused the error. See <<error-payload,Error Payload>>.

[[extensions]]
== Extensions
This document describes the Tasks CRUD service. Any extensions to this service
MUST not redefine or change the use/meaning of any URLs, objects (or their properties), 
arrays, properties, etc. defined in this document. Clients that do not recognize 
extensions to the service SHOULD ignore them.

[WARNING]
It is possible that future forward-compatible modifications to this 
specification will include new elements, attributes, attribute values, 
and data types. Extension designers should take care to prevent future 
modifications from breaking or redefining those extensions.

The details of designing and implementing compatible extensions is beyond the scope of 
this document.

